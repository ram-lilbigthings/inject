import { components } from '@blockfrost/openapi';
import { AllMethodOptions, PaginationOptions } from '../../../types';
import { BlockFrostAPI } from '../../../index';
/**
 * Obtains list of assets.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets/get | API docs for Assets}
 * @remarks
 * If an asset is completely burned, it will stay on the list with quantity 0 (order of assets is immutable).
 *
 * @param stakeAddress - Bech32 stake address
 * @param pagination - Optional, Pagination options
 * @returns List of assets
 *
 */
export declare function assets(this: BlockFrostAPI, pagination?: PaginationOptions): Promise<components['schemas']['assets']>;
/**
 * Obtains information about a specific asset.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1%7Basset%7D/get | API docs for Asset}
 *
 * @param asset - Concatenation of the policy ID and hex-encoded asset name
 * @returns Information about a specific asset.
 *
 */
export declare function assetsById(this: BlockFrostAPI, asset: string): Promise<components['schemas']['asset']>;
/**
 * Obtains history of a specific asset.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1%7Basset%7D~1history/get | API docs for Asset history}
 *
 * @param asset - Concatenation of the policy ID and hex-encoded asset name
 * @param pagination - Optional, Pagination options
 * @returns History of a specific asset.
 *
 */
export declare function assetsHistory(this: BlockFrostAPI, asset: string, pagination?: PaginationOptions): Promise<components['schemas']['asset_history']>;
/**
 * Obtains whole history of a specific asset.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1%7Basset%7D~1history/get | API docs for Asset history}
 * @remarks
 * Variant of `assetsHistory` method for fetching all pages with built-in requests batching
 *
 * @param asset - Concatenation of the policy ID and hex-encoded asset name
 * @param allMethodOptions - Optional, Options for request batching
 * @returns Whole history of a specific asset.
 *
 */
export declare function assetsHistoryAll(this: BlockFrostAPI, asset: string, allMethodOptions?: AllMethodOptions): Promise<components['schemas']['asset_history']>;
/**
 * Lists of transactions of a specific asset.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1%7Basset%7D~1transactions/get | API docs for Asset transactions}
 *
 * @param asset - Concatenation of the policy ID and hex-encoded asset name
 * @param pagination - Optional, Pagination options
 * @returns List of a specific asset transactions.
 *
 */
export declare function assetsTransactions(this: BlockFrostAPI, asset: string, pagination?: PaginationOptions): Promise<components['schemas']['asset_transactions']>;
/**
 * Obtains list of a addresses containing a specific asset.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1%7Basset%7D~1addresses/get | API docs for Asset addresses}
 *
 * @param asset - Concatenation of the policy ID and hex-encoded asset name
 * @param pagination - Optional, Pagination options
 * @returns List of a addresses containing a specific asset.
 *
 */
export declare function assetsAddresses(this: BlockFrostAPI, asset: string, pagination?: PaginationOptions): Promise<components['schemas']['asset_addresses']>;
/**
 * Obtains list of assets minted under a specific policy.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1policy~1%7Bpolicy_id%7D/get | API docs for Assets of a specific policy}
 *
 * @param policyId - Specific policy ID
 * @param pagination - Optional, Pagination options
 * @returns List of assets minted under a specific policy.
 *
 */
export declare function assetsPolicyById(this: BlockFrostAPI, policyId: string, pagination?: PaginationOptions): Promise<components['schemas']['asset_policy']>;
/**
 * Obtains list of all assets minted under a specific policy.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Assets/paths/~1assets~1policy~1%7Bpolicy_id%7D/get | API docs for Assets of a specific policy}
 * @remarks
 * Variant of `assetsPolicyById` method for fetching all pages with built-in requests batching
 *
 * @param policyId - Specific policy ID
 * @param pagination - Optional, Pagination options
 * @param allMethodOptions - Optional, Options for request batching
 * @returns List of asset minted under a specific policy.
 *
 */
export declare function assetsPolicyByIdAll(this: BlockFrostAPI, policyId: string, allMethodOptions?: AllMethodOptions): Promise<components['schemas']['asset_policy']>;
