"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nutlinkTickersAll = exports.nutlinkTickers = exports.nutlinkAddressTickerAll = exports.nutlinkAddressTicker = exports.nutlinkAddressTickersAll = exports.nutlinkAddressTickers = exports.nutlinkAddress = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function nutlinkAddress(address) {
    try {
        const res = await this.instance(`nutlink/${address}`);
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.nutlinkAddress = nutlinkAddress;
async function nutlinkAddressTickers(address, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`nutlink/${address}/tickers`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.nutlinkAddressTickers = nutlinkAddressTickers;
async function nutlinkAddressTickersAll(address, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.nutlinkAddressTickers(address, pagination), allMethodOptions);
}
exports.nutlinkAddressTickersAll = nutlinkAddressTickersAll;
async function nutlinkAddressTicker(address, ticker, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`nutlink/${address}/tickers/${ticker}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.nutlinkAddressTicker = nutlinkAddressTicker;
async function nutlinkAddressTickerAll(address, ticker, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.nutlinkAddressTicker(address, ticker, pagination), allMethodOptions);
}
exports.nutlinkAddressTickerAll = nutlinkAddressTickerAll;
async function nutlinkTickers(ticker, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`nutlink/tickers/${ticker}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.nutlinkTickers = nutlinkTickers;
async function nutlinkTickersAll(ticker, allMethodOptions) {
    return (0, utils_1.paginateMethod)(pagination => this.nutlinkTickers(ticker, pagination), allMethodOptions);
}
exports.nutlinkTickersAll = nutlinkTickersAll;
