"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metadataTxsLabelCbor = exports.metadataTxsLabel = exports.metadataTxsLabels = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
/**
 * Obtains list of all used transaction metadata labels.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Metadata/paths/~1metadata~1txs~1labels/get | API docs for Transaction metadata labels}
 *
 * @param pagination - Optional, Pagination options
 * @returns List of all used transaction metadata labels
 *
 */
async function metadataTxsLabels(pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`metadata/txs/labels`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.metadataTxsLabels = metadataTxsLabels;
/**
 * Obtains transaction metadata for a specific label in JSON format.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Metadata/paths/~1metadata~1txs~1labels~1%7Blabel%7D/get | API docs for Transaction metadata content in JSON}
 *
 * @param label - Metadata label
 * @param pagination - Optional, Pagination options
 * @returns List of transaction metadata for the specific label
 *
 */
async function metadataTxsLabel(label, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`metadata/txs/labels/${label}`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.metadataTxsLabel = metadataTxsLabel;
/**
 * Obtains transaction metadata for a specific label in CBOR format.
 * @see {@link https://docs.blockfrost.io/#tag/Cardano-Metadata/paths/~1metadata~1txs~1labels~1%7Blabel%7D~1cbor/get | API docs for Transaction metadata content in CBOR}
 *
 * @param label - Metadata label
 * @param pagination - Optional, Pagination options
 * @returns List of transaction metadata for the specific label
 *
 */
async function metadataTxsLabelCbor(label, pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    try {
        const res = await this.instance(`metadata/txs/labels/${label}/cbor`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        });
        return res.body;
    }
    catch (error) {
        throw (0, errors_1.handleError)(error);
    }
}
exports.metadataTxsLabelCbor = metadataTxsLabelCbor;
