{"version":3,"file":"index.js","sources":["../src/types.ts","../src/utils.ts","../src/tokens/aada.ts","../src/tokens/agc.ts","../src/tokens/agix.ts","../src/tokens/ashib.ts","../src/tokens/bank.ts","../src/tokens/c3.ts","../src/tokens/cblp.ts","../src/tokens/chry.ts","../src/tokens/clap.ts","../src/tokens/clay.ts","../src/tokens/cneta.ts","../src/tokens/copi.ts","../src/tokens/dana.ts","../src/tokens/dgaf.ts","../src/tokens/ding.ts","../src/tokens/disco.ts","../src/tokens/djed.ts","../src/tokens/emp.ts","../src/tokens/flac.ts","../src/tokens/gens.ts","../src/tokens/gero.ts","../src/tokens/herb.ts","../src/tokens/hosky.ts","../src/tokens/iag.ts","../src/tokens/ibtc.ts","../src/tokens/ieth.ts","../src/tokens/indy.ts","../src/tokens/iusd.ts","../src/tokens/lq.ts","../src/tokens/meld.ts","../src/tokens/milk.ts","../src/tokens/min.ts","../src/tokens/mint.ts","../src/tokens/moai.ts","../src/tokens/newm.ts","../src/tokens/ninjaz.ts","../src/tokens/nmkr.ts","../src/tokens/ntx.ts","../src/tokens/pavia.ts","../src/tokens/prspr.ts","../src/tokens/shen.ts","../src/tokens/snek.ts","../src/tokens/snow.ts","../src/tokens/society.ts","../src/tokens/stable.ts","../src/tokens/sundae.ts","../src/tokens/vyfi.ts","../src/tokens/wmt.ts","../src/tokens/woz.ts","../src/tokens/wrt.ts","../src/tokens/yummi.ts","../src/index.ts"],"sourcesContent":["export type FetcherOptions = {\n  /**\n   * Fetch timeout in milliseconds. Default to 20s\n   */\n  timeout?: number;\n};\n\nexport const defaultFetcherOptions: FetcherOptions = {\n  timeout: 20_000,\n};\n\nexport type SupplyFetcherResponse = {\n  total?: string;\n  circulating?: string;\n};\n\nexport type SupplyFetcher = (\n  options?: FetcherOptions\n) => Promise<SupplyFetcherResponse>;\n","import { BlockFrostAPI } from \"@blockfrost/blockfrost-js\";\nimport axios, { AxiosInstance } from \"axios\";\n\nimport { FetcherOptions } from \"./types\";\n\nexport function getBlockFrostInstance(options: FetcherOptions): BlockFrostAPI {\n  return new BlockFrostAPI({\n    projectId: process.env[\"BLOCKFROST_PROJECT_ID\"] ?? \"\",\n    requestTimeout: options.timeout,\n  });\n}\n\nexport function getAxiosInstance(options: FetcherOptions): AxiosInstance {\n  return axios.create({\n    timeout: options.timeout,\n  });\n}\n\nexport async function getAmountInAddresses(\n  blockFrost: BlockFrostAPI,\n  token: string,\n  addresses: string[]\n): Promise<bigint> {\n  const amounts = await Promise.all(\n    addresses.map(async (addr): Promise<bigint> => {\n      const value = addr.startsWith(\"stake\")\n        ? await blockFrost.accountsAddressesAssetsAll(addr)\n        : await blockFrost.addresses(addr).then((resp) => resp.amount);\n      const amount = value\n        .filter(({ unit }) => unit === token)\n        .reduce((sum, x) => sum + BigInt(x.quantity), 0n);\n      return amount;\n    })\n  );\n  return amounts.reduce((sum, x) => sum + x, 0n);\n}\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst AADA = \"8fef2d34078659493ce161a6c7fba4b56afefa8535296a5743f6958741414441\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 29_500_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, AADA, [\n    \"stake1u98ak0va7tgd23rl62tphdare6z602e0vx5m0fw4gdr65kq875eec\",\n    \"stake1uyt8x8wwvn5ze8aw6eqs35w2znyh4xnn9xsu3jxjk503nxcmdkjuz\",\n    \"stake1u9hqmm7neuayxpm9962kk09x27yu5kmcx6h9f98tc4r2mzsyaeh40\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { SupplyFetcher } from \"../types\";\n\nconst fetcher: SupplyFetcher = async () => {\n  const total = 300_000_000;\n  return {\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const circulating = await axios(\n    \"https://tokensupply.singularitynet.io/tokensupply?tokensymbol=agix&q=circulatingsupply\"\n  ).then((res) => res.data.toString());\n  const total = await axios(\n    \"https://tokensupply.singularitynet.io/tokensupply?tokensymbol=agix&q=totalsupply\"\n  ).then((res) => res.data.toString());\n  return {\n    circulating,\n    total,\n  };\n};\n\nexport default fetcher;\n","import { SupplyFetcher } from \"../types\";\n\nconst fetcher: SupplyFetcher = async () => {\n  const total = 109000000000;\n  return {\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst BANK = \"2b28c81dbba6d67e4b5a997c6be1212cba9d60d33f82444ab8b1f21842414e4b\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 2.5e12;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, BANK, [\n    \"stake1uxq7mehxxywwzf0cczf7tq4surcphjdd53ngw5ev6qxf7hstnt9qf\", // $bankercoinada\n  ]);\n  const treasury = Number(treasuryRaw);\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { SupplyFetcher } from \"../types\";\n\nconst fetcher: SupplyFetcher = async () => {\n  const total = 100_000_000;\n  return {\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst CBLP = \"ee0633e757fdd1423220f43688c74678abde1cead7ce265ba8a24fcd43424c50\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e9;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, CBLP, [\n    \"stake1u80gm88pyu78rr2ee3p7mn482xza6thtnvg3k3c0y43syrsdzm0lw\", // $yam_treasury\n    \"stake1uy02585lgl0j9pfzz2jxqmdckar2jqlpwre899j9304l3ysezxnjj\", // $yam_community\n    \"stake1uxxghepgwfmtq9spaxf46ucxvns54pyvcqtrpk4888dtqdqhth0sj\", // $yam_misc\n    \"stake1u9u5xdu6dxtqkq87rfpls54xp3jw6yqtvaywfzjzyejh65qtjjah2\", // $yam_team\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst CHRY = \"75fcc276057db5fc48eae0e11453c773c8a54604c3086bf9d95ac1b743485259\";\nconst TREASURY_ADDRESSES = [\n  \"stake1uxluurkaazlqyqfqn22acl6lprea52avn6da0q88yk46zfqrc93qj\",\n];\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 88e6; // 88 million\n  const treasury = Number(\n    await getAmountInAddresses(blockFrost, CHRY, TREASURY_ADDRESSES)\n  );\n\n  return {\n    circulating: ((total * 1e6 - treasury) / 1e6).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst CLAP = \"db30c7905f598ed0154de14f970de0f61f0cb3943ed82c891968480a434c4150\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e9; // 1 billion\n  const treasuryRaw = await getAmountInAddresses(blockFrost, CLAP, [\n    \"addr1qxkcc74fpfvdenelc7m4zxtezrgvnhmd7z78jlkgr4gy9x9cjxt7rq9rfwqqh3wv24adfv2hex0ttwu3zh7e276xmcesgw34jc\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e3;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst CLAY = \"38ad9dc3aec6a2f38e220142b9aa6ade63ebe71f65e7cc2b7d8a8535434c4159\";\nconst TREASURY_ADDRESSES = [\n  \"addr1q98wxe2xdwj4agd0cx34pmecfg2s2944mmnyqat2wtf8jxulcgstlsmaaeu0eu40g54rpv3d9n6crxc7vrpjv2f3vfpqrzd0vy\", //treasury 1\n  \"addr1qy6rekt5zw7s08q5kvdcw7l8a3npv60sjpk7c2xqjgg23fdsq7gk94dsvmc8razsutevx54rgs3dfza759mmt5m2pppq8wlgdp\", //treasury 2\n  \"addr1z8tlml0x8spf2qyzse7qwh0hh4qp50fhx6m2kmr3wsvez340fm4l4jflstl7hz7ucs5793gzr297g67psdx8dssdf68ssh59m2\", //baking\n  \"addr1z9uxzlm9zf98kgf27sslzyl2d0j50ssdxlh6du2jt5r7vma0fm4l4jflstl7hz7ucs5793gzr297g67psdx8dssdf68sguhkf9\", //staking\n];\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const total = 2.5e9; // 2.5 billion\n  const blockFrost = getBlockFrostInstance(options);\n  const treasury =\n    Number(await getAmountInAddresses(blockFrost, CLAY, TREASURY_ADDRESSES)) /\n    1e4;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst CNETA =\n  \"b34b3ea80060ace9427bda98690a73d33840e27aaa8d6edb7f0c757a634e455441\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  // source: https://docs.anetabtc.io/docs/user-guides/tokenomics/\n  const total = 1_000_000_000n;\n  const totalOnCardano = 1_000_000_000n;\n  const treasury = await getAmountInAddresses(blockFrost, CNETA, [\n    \"stake1u8ypd7vtdsst25v65ddqgdgt7w9plww0zyqgktfrr0apscqepfcnm\",\n    \"stake1uxpa2qrzplzsmq5d492xc3ge6g5hfsvymkakznvva5fcznsjy5ed5\",\n  ]);\n  return {\n    circulating: (totalOnCardano - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 3_840_000_000;\n  const circulating = await axios(\n    \"https://raw.githubusercontent.com/Cornucopias/circulating-supply/main/cs\"\n  ).then((res) => res.data.toString());\n  return {\n    circulating,\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 125_000_000;\n  const circulating: number = await axios(\n    \"https://api.coingecko.com/api/v3/coins/ardana\"\n  ).then((res) => res.data.market_data.circulating_supply);\n  return {\n    circulating: circulating.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst DGAF = \"64c3ebd40ed377989aa3069a2936e07c6ce82df46688c473d921520664676166\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 100_000_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, DGAF, [\n    \"stake1u9k7mcf6zvun9wlfrkwsg2w8sy95302gpnj73ly0l6tqhks997y0t\", // dgaf treasury + vault allocation\n  ]);\n  const treasury = Number(treasuryRaw);\n  const burnedRaw = await getAmountInAddresses(blockFrost, DGAF, [\n    \"addr1w88w37rdprvqrjn77vuj3mzral6dh6cex0m7smc9p2uqvlct6vp8a\", // dgaf unredeemable addr\n  ]);\n  const burned = Number(burnedRaw);\n  return {\n    circulating: (total - treasury - burned).toString(),\n    total: (total - burned).toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 1_000_000_000;\n  const circulating: number = await axios(\n    \"https://universe.pxlz.org/circulating\"\n  ).then((res) => res.data);\n  return {\n    circulating: circulating.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst DISCO =\n  \"5612bee388219c1b76fd527ed0fa5aa1d28652838bcab4ee4ee63197446973636f696e\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 5777777777;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, DISCO, [\n    \"addr1xy37w4aqgukmhljn229a4m0ccsk3y49x40tfrnj3u8gw96pruat6q3edh0l9x55tmtkl33pdzf22d27kj889rcwsut5qaa2r64\",\n    \"addr1xywvz3224hc5h5uu8g3x6rk6pjdps6c2acewa735haydqmcuc9z54t03f0fecw3zd58d5ry6rp4s4m3jamarf06g6phsgzp0xt\",\n    \"addr1xxy8exmrl37hk2pyct5mgc45tjh53udzfhqfxavzlc743vug0jdk8lra0v5zfshfk33tgh90frc6ynwqjd6c9l3atzesqljg09\",\n    \"addr1xy306nxnhkseaw4rlgfa55skyd342z4mtq5k2j4jux7k4kfzl4xd80dpn6a287snmffpvgmr259tkkpfv49t9cdadtvssms0kr\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e8;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst DJED =\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\";\nconst DJEDNFT =\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a6564537461626c65436f696e4e4654\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e12;\n  const addresses = await blockFrost.assetsAddresses(DJEDNFT);\n  const treasuryRaw = await getAmountInAddresses(blockFrost, DJED, [\n    addresses[0][\"address\"],\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: (total - treasury).toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 200_000_000;\n  const circulating: number = await axios\n    .get(\"https://token.empowa.io/emp/supply\")\n    .then((res) => res.data.circulating_amount / 1e6);\n  return {\n    circulating: circulating.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst FLAC = \"8daefa391220bd0d8d007f3748d870f7f3c106040314c8515ccc35a5464c4143\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 2_000_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, FLAC, [\n    \"stake1u9ll9vjjqkgyau7nteehe4aufxfx4qq0wr4vzs36gc8vl9sghkjg4\", // treasury\n    \"stake1u9sedsmwcmt6za0rhqywryyydl3f7s74ntfk5dhzaev2fkcgp7p36\", // team\n    \"stake1uygtdaws5xvjksv8ccqza8sqfv93jdmeuq8jw3xe48l4p8s9r550q\", // marketing\n    \"stake1u80f822sv5gag205l0xpl85jl0yqf4255qmpa407mwxrzsgzpavty\", // parternships\n    \"stake1uxc5n75f9fr75d734tnj4gayf3pxzwm84w8nauh5tdz9d6c40yuv8\", // liquidity\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst GENS =\n  \"dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb0014df1047454e53\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 100_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, GENS, [\n    \"addr1xyjan66zyj6tef93u795axqcqwg353fnx63tzaayursj9ke9m845yf95hjjtreutf6vpsqu3rfznxd4zk9m6fc8pytdsmahfkf\",\n    \"addr1xyr8h2yyn8lgz9epvu8f40e44vtxy7r0nahpj3u75vhe7fqx0w5gfx07sytjzecwn2lnt2ckvfuxl8mwr9reage0nujqyzdx0y\",\n    \"addr1xxwu7tkfvsvmjpecy5s87a9jgpeptrmgq0dkccq4l5zhvm5aeuhvjeqehyrnsffq0a6tysrjzk8ksq7md3sptlg9wehq74j6vl\",\n    \"addr1xx2392yc53nsazxx5z9y40q7gttenemhhgcjaxr5sllugpv4z25f3fr8p6yvdgy2f27puskhn8nh0w3396v8fpllcszs99vzge\",\n    \"addr1xxnv39tyvfvlhl30quelamanyq2exzqwl46y7tr4mzh35j4xez2kgcjel0lz7penlmhmxgq4jvyqalt5fuk8tk90rf9qphswe4\",\n    \"addr1xy9g0r758h52mnnps0eqdrzgy573anh4t0mrmn3w8k95n3g2s78ag00g4h8xrqljq6xysffarm802klk8h8zu0vtf8zsw5shk9\",\n    \"addr1x9wrenxj9acmzfhqns27v7mgdwl2kuull2hdjszyxnr5pwju8nxdytm3kynwp8q4ueaks6a74deel74wm9qygdx8gzaqjap2uz\",\n    \"addr1xysfxc60v6vdwzddeen22ur4u9atdk4k499yfc8e4fsh5u3qjd357e5c6uy6mnnx54c8tct6kmdtd222gns0n2np0feqjzv4eq\",\n    \"addr1xys8w4jtrzqyqhecamqzp9ntlx5ehmt29ehjhf3988nxdweqwatykxyqgp0n3mkqyztxh7dfn0kk5tn09wnz2w0xv6asu4c2g6\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { SupplyFetcher } from \"../types\";\n\nconst fetcher: SupplyFetcher = async () => {\n  const total = 500_000_000;\n  return {\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst HERB = \"bb4cfbe0f6be60b80f90f815e8353b93431de4df785d75350b9d214a48455242\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 420_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, HERB, [\n    \"stake1uyq4g3vqed986la2h7ywavup76xjr0kpfew30u99quw6w4qjxjucm\", // rewards\n    \"stake1uxmx9lcvc7305u8npfcc570s5n9rwleyql37wqa7pr4t8vcwehs7p\", // treasury\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst HOSKY =\n  \"a0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235484f534b59\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e15;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, HOSKY, [\n    \"stake1uyhr6j0v95y3nwemsfyw8l3ant90wruclgwe9ktnm5ptk8qhfnyt6\", // charles\n    \"stake1uxgekrcht2nz7eag9kffkh5s2hcpqswaakf9synqdhs82zg6x25pc\", // tbd\n    \"stake1u87awjfd5mdufylf0zzeuwz6vpllp0wz0elklphl833mqrchvwzys\", // rugpool\n    \"stake1u83p8p9uvdcglucefnxxjc79u54zv3e3qptsx5qjcwxq5rcjzrlwk\", // meme\n  ]);\n  const treasury = Number(treasuryRaw);\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst IAG = \"5d16cc1a177b5d9ba9cfa9793b07e60f1fb70fea1f8aef064415d114494147\";\nconst TREASURY_ADDRESSES = [\n  \"stake1u9cms5rnmqjed2dxfs9xcq5zupxpcq3l0jq492te2auhppcnlfdsv\", // Ecosystem Development Fund\n  \"stake1uyc5ycj8e8fq0ss6fpjv7627tczcwn26w0lrql2gcflqm0q2xd35e\", // Community Incentives\n  \"stake1uxc38mnkfvsm0yc2un6g8yp49nshnv2t4rcvqapeahnm87ccz9ns8\", // Liquidity 1\n  \"stake1uy8a6tmpcy9mh57m8puka0ra0zq2zt4pjcuphyh770u3spg8cn9zk\", // Liquidity 2\n  \"stake1u9gc67yuparwf2qjvvsv5c652yf8zfcn7wwtmruap0fte6qyz6h9g\", // Development\n  \"stake1ux0x89ur69hu2gqvsaw8fpt45zj4kt50h8lq4ycd68ycsmc9m4y99\", // Advisors / Marketing\n  \"stake1uywysqcqqys7qewrcl0uhda8g25ecr5k2klsr2d45jmdpnsqmc5hh\", // Team\n];\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e9; // 1 billion\n  const treasury =\n    Number(await getAmountInAddresses(blockFrost, IAG, TREASURY_ADDRESSES)) /\n    1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getBlockFrostInstance } from \"../utils\";\n\nconst iBTC = \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069425443\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const assetInfo = await blockFrost.assetsById(iBTC);\n  const circulating = Number(assetInfo?.quantity) / 1e6;\n  return {\n    circulating: circulating.toString(),\n    total: circulating.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getBlockFrostInstance } from \"../utils\";\n\nconst iETH = \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069455448\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const assetInfo = await blockFrost.assetsById(iETH);\n  const circulating = Number(assetInfo?.quantity) / 1e6;\n  return {\n    circulating: circulating.toString(),\n    total: circulating.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const total = 35_000_000;\n  const axios = getAxiosInstance(options);\n  const response = await axios.get(\n    \"https://analytics.indigoprotocol.io/api/stats/indy-circulating-supply\"\n  );\n  const treasury = Number(response.data.circulatingSupply) / 1e6;\n\n  return {\n    circulating: treasury.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getBlockFrostInstance } from \"../utils\";\n\nconst iUSD = \"f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const assetInfo = await blockFrost.assetsById(iUSD);\n  const circulating = Number(assetInfo?.quantity) / 1e6;\n  return {\n    circulating: circulating.toString(),\n    total: circulating.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst LQ = \"da8c30857834c6ae7203935b89278c532b3995245295456f993e1d244c51\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 21_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, LQ, [\n    \"stake17xuctqah3vtn232230mgnh8j0g0c9xe9j59a5jv54v2m6lghq7wjg\", // user dist\n    \"stake17y92lfz032ahf6xly5fp3l8k28xzpzullx46ffg8vmt7xpquzjyrp\", // team\n    \"stake179h0rfqsl5qhl7mh9wrazeel0wkzxck8zaq6et4k3jtz96c374qun\", // treasury\n    \"stake1782eemwxrrfmzga0yq5eewhu5cqe6p0n0wa8xwzhwkwhl4q327q0r\", // staking\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const circulating = await axios(\n    \"https://app-backend.meld.com/api/market/meld/supply\"\n  ).then((res) => res.data.toString());\n  const total = 4e9; // 4 billion\n  return {\n    circulating,\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst MILK = \"8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 10_000_000n;\n  const treasury = await getAmountInAddresses(blockFrost, MILK, [\n    \"addr1v8c3mztrzpjqxzrcl8rvxln8xyvanz6pufuaju7rwkglnychv3cg3\",\n  ]);\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst MIN = \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e\";\nconst TREASURY_ADDRESSES = [\n  \"addr1qxkmr0m22xeqludcg5rjdmecjxasu9fat0680qehtcsnftaadgykewa9ufvegeuca9yyq03d9v7ea2y2zthgu7hfgjtsddp6gr\", // yield farming bot\n  \"addr1vx00uxlpkzgkrga47zdypj40a3yjs0u3wad88kdy9l3rekcrmyz69\", // vesting bot for MINt conversion\n  \"addr1wx5p836jswavyfd3nuwscz53fkyu43kmn2wwje73qhf48mqw02kqx\", // vesting contract\n  // TREASURY\n  \"addr1vy5nz5a8lvrd294n4cachm7qmv5jsjal9etkpwyjvqhsunq70e3fe\", // old treasury\n  \"addr1zymeshes0pxnr2s4v95a4wchxs74l0lqt5n3f6rxynnepgjj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq64anuz\", // team\n  \"addr1z87vw6ts32hywu4j4kyk9qfgd36zhzx3y7fc786vgzlc57zj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq9rwl7c\", // dev fund\n  \"addr1z9wdv59sq7zzy2l6gchq3247lz7ssfsxs45nj4njhwsp5uzj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pqzygnta\", // DAO\n  \"addr1z9mjhq5c4s0smv2c92g9yvecpju3p8cfaneu8jzwq97ry62j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pqw9pw55\", // incentives & partnerships\n  \"addr1zx0wxal6dz7rjzxk2mwfvj9564rp9uajqrscftx44tp6ha6j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq83j9cv\", // yield farming treasury\n];\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 5e9; // 5 billion\n  const treasury =\n    Number(await getAmountInAddresses(blockFrost, MIN, TREASURY_ADDRESSES)) /\n    1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst MINT = \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e74\";\nconst TREASURY_ADDRESSES = [\n  \"addr1v9urht2tqg7ncs7r545qdj2wn5tpam5l04t7eyermpmyvmg5xf2mt\", // FISO\n  \"addr1w9p9akyhpqsy0xq79g8hspy90xl9htxfrd3mama6py42jjgtvfgn8\", // DripDropz\n];\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 100_000_000;\n  const treasury =\n    Number(await getAmountInAddresses(blockFrost, MINT, TREASURY_ADDRESSES)) /\n    1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst MOAI = \"482fb00dc32186a4c587dca2df3c7cf2bc455332ab581d51967306e14d4f4149\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = Number(60_000_000);\n  const treasuryRaw = await getAmountInAddresses(blockFrost, MOAI, [\n    \"stake1uyszp885h7z8fry5thjdcj5msk59ajsannca7x3g3d2ycvgqfq6t9\", // Treasury\n    \"stake1u9afgy0npvt9sal5vzlm5t6n5uyvch8t9mmznhtkn9wjacgfdtldf\", // Mutant Stake Rewards Distribution\n    \"stake1ux07wmwzwv06kl02ct3m4lly569lsvjvp6za9756r8hdsmslyw5mv\", // burn wallet\n  ]);\n  const treasury = Number(treasuryRaw);\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst NEWM = \"682fe60c9918842b3323c43b5144bc3d52a23bd2fb81345560d73f634e45574d\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 9_735_033_900;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, NEWM, [\n    \"stake1u8kt3m25a5nycushdc7rl7jm8wmll23nadxc8rpzwx7vq8s3j8jf8\", // NEWM foundation\n    \"stake1ux0vqjvjccqvk8a43jwa5nd2aqzt4ekdjarvnqmt9629pzcty2qcs\", // BeatHaven\n    \"stake1u8n0tlf4f2kktz7k3kr0g7sdn98stmsmm42kw7xcue2smycv766hh\", // NEWM LLC\n    \"addr1wxkajet4zhhuylr6475ykqerll0gl8x8v8kgmnrpxt2vrwq2eh67y\", // ISPO (via DropDropz)\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst NINJAZ =\n  \"df1d850c46d6c9d12cbf6181c35db9225a91b77c8a646b7f636f8ae40014df104e494e4a415a\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 5_000_000_000;\n  const treasury = await getAmountInAddresses(blockFrost, NINJAZ, [\n    \"addr1x83nemulpeta9sdvmys3stka3qr3vdgt2cea9nd7k43pknwyzjxyjwc0htews4pm02nnyaa0sep8lmc9lsz8e4dfleeqe4r25a\",\n    \"addr1x8cesdmszn65gp0wulhle6fvtkgcumu7kuyjwgd3unvcm5hljfu8vk7x6lh6vd8wjf2wymdq339fq8h85ujgky928jxs0g2eq4\",\n    \"addr1x8qxwpaamqac5pjvrqsesm6s0kgvh4fjg2gxqgfgm3z0482690h9e0eu6px7y70f4en0mlveshvzwuvmxjpl8v7knklqtz5eda\",\n    \"addr1x8xscqxca9szg7xgsuh2cfjwunjutqevawx6sdp0qxvk8upfaw2m3ygzjvu6639tghza86gr99f85lk2874r9yn8ukwsguhnuw\",\n    \"addr1xx86d7hxnyhnu4sq3kwq2w67w54e6t3wpd8vm3wcdy6n02kr7ayf3pjwwpyrntnaexdxzemq3k7adaq5m4cxcph06pksh32ndx\",\n    \"addr1xxnnkkfc4uwwut0nc9nqd4sw955ehsv46gahq5vue8dljsll5f6g7hyfa82fc9uq202unkykmzzd3ymx7rc54sjrywaqhj2a24\",\n    \"addr1xxs8mllzludfkmfaunx2g38xr8grzxuruul46z2h0t7n62x2rj8vv8evw74rudkjjw6ufm5sy39cvwawcvuw2scfyqmqsu0wgd\",\n    \"addr1qx2waaxg7hgt79a70892qegnerdqhxy45uyn698wncegwryh0ze5nrhs9ajhgnzd6eum9zuhu5e7g533cacmndqgu20shextxn\",\n  ]);\n\n  return {\n    circulating: (total - Number(treasury) / 1e6).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 10_000_000_000;\n  const circulating: number = await axios(\n    \"https://api.coingecko.com/api/v3/coins/nft-maker\"\n  ).then((res) => res.data.market_data.circulating_supply);\n  return {\n    circulating: circulating.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const circulating = await axios(\n    \"https://tokensupply.singularitynet.io/tokensupply?tokensymbol=ntx&q=circulatingsupply\"\n  ).then((res) => res.data.toString());\n  const total = await axios(\n    \"https://tokensupply.singularitynet.io/tokensupply?tokensymbol=ntx&q=totalsupply\"\n  ).then((res) => res.data.toString());\n  return {\n    circulating,\n    total,\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst PAVIA =\n  \"884892bcdc360bcef87d6b3f806e7f9cd5ac30d999d49970e7a903ae5041564941\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const total = 2e9;\n  const blockFrost = getBlockFrostInstance(options);\n  const treasury = await getAmountInAddresses(blockFrost, PAVIA, [\n    \"addr1qx49wuqaa0j83z4y04nyltpcmf602f0afn5s84l7a9wnjryg090a5a6en7e483rh98d67efcenetg9xpr6fvv2llmhts837axc\",\n  ]);\n  return {\n    circulating: (total - Number(treasury)).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst PRSPR =\n  \"52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b95052535052\";\nconst PRSPR_POLICY_ID =\n  \"52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b9\";\nconst TREASURY = \"addr1wydpsqf5zz9ddy76d3f3jrrf6jkpyjr48nx5a706w9y68ucy4wu6s\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const circulating = Number(\n    await blockFrost\n      .assetsPolicyById(PRSPR_POLICY_ID)\n      .then((resp) => resp[0].quantity)\n  );\n  const total = 375000000;\n  const treasury = Number(\n    await getAmountInAddresses(blockFrost, PRSPR, [TREASURY])\n  );\n  return {\n    circulating: (circulating - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst SHEN =\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd615368656e4d6963726f555344\";\nconst DJEDNFT =\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a6564537461626c65436f696e4e4654\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1e12;\n  const addresses = await blockFrost.assetsAddresses(DJEDNFT);\n  const treasuryRaw = await getAmountInAddresses(blockFrost, SHEN, [\n    addresses[0][\"address\"],\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: (total - treasury).toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst SNEK = \"279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f534e454b\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 76_715_880_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, SNEK, [\n    \"stake1u8zjwv6a8ztrl9xkcc90utn32y4jsrxep90z2967c5aqv6cxchhhv\", // $snekcoinada\n    \"stake1u8ncs7903m7pxzfyrzxagzx0aey4aus2533eeqlnevw0h4qs2f82r\", // $snekcoinvault\n  ]);\n\n  const burnRaw = await getAmountInAddresses(blockFrost, SNEK, [\n    \"addr1w8qmxkacjdffxah0l3qg8hq2pmvs58q8lcy42zy9kda2ylc6dy5r4\", //$burnsnek\n  ]);\n\n  const treasury = Number(treasuryRaw);\n  const burn = Number(burnRaw);\n  return {\n    circulating: (total - treasury - burn).toString(),\n    total: (total - burn).toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst SNOW = \"8f52f6a88acf6127bc4758a16b6047afc4da7887feae121ec217b75a534e4f57\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 1_000_000n;\n  const treasury = await getAmountInAddresses(blockFrost, SNOW, [\n    \"addr1q8jvdvjewjvmtkl4juup0wekz75520l5d4ltap48gwhqkfq0m4qjp5thfp4zf2s0z586f9aq54ct3e8r9gzw0edulveq3vn8tu\", // SNOW treasury\n    \"addr1vxfa8dwzflct4re7qn2ls7t46w6rc479rafnwzqx4z2asuq6cg00t\", // MuesliSwap Staking Rewards distribution\n  ]);\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const total = 700_000_000;\n  const projector_rewards = 56_000_000;\n\n  const axios = getAxiosInstance(options);\n  const info = await axios(\"https://city.theapesociety.io/api/getsocietyinfo\");\n\n  const emissions = info.data.emissions;\n  const burned = info.data.burned / 1e6;\n\n  return {\n    circulating: (total - burned - emissions - projector_rewards).toString(),\n    total: (total - burned).toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst STABLE =\n  \"2adf188218a66847024664f4f63939577627a56c090f679fe366c5ee535441424c45\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 206_420_691_337n;\n  const treasury = await getAmountInAddresses(blockFrost, STABLE, [\n    \"stake1uyjlfag0xqnmyk6tfa5a0weanrl4yzxxf0kjhk4k0e2s4ygczhp79\", // $stablepayments\n    \"stake1uxufvv9llknwmracxxsnxqe8dnc5ut0z2jgparqz5rh9y5cda5g3k\", // $stablelistings\n    \"stake1uyuxkjldqjztcfuj8h288rc9ryfxzek7375vwplhzrns7zqwy9emg\", // $stablerewards\n    \"stake1uyc3xeye50t8d9vhm7jt5jn83ddfdtwr0s64v0qhy7q2jfcqejl53\", // $stablemarketing\n    \"stake1uxjmh6ngs3xsk3d9lxqnne6yqm2822e23hpv0j6q3uruxzc865t3j\", // $stableutility\n  ]);\n\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst SUNDAE =\n  \"9a9693a9a37912a5097918f97918d15240c92ab729a0b7c4aa144d7753554e444145\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 2e9; // 2 billion\n  const treasuryRaw = await getAmountInAddresses(blockFrost, SUNDAE, [\n    \"addr1w9pgj46r4wh80ujlrdf5h6sxuuvfac2wurfnsn4xgqw584sfa966l\",\n    \"addr1w9742z4fewans7ry6cjp95pc4ecv7y54cx298lp5qfw7s9gv8ukrj\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst VYFI = \"804f5544c1962a40546827cab750a88404dc7108c0f588b72964754f56594649\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const total = 450_000_000;\n  const treasuryRaw = await getAmountInAddresses(blockFrost, VYFI, [\n    \"addr1qx6jq2ns6g9t4y8zyf2ahmhjzw8k6h3a7fy5tkqwgnwgh09z80nptm8at52jqjauttsswp6d7h9rq807z80mqhge5aqqctjalg\",\n  ]);\n  const treasury = Number(treasuryRaw) / 1e6;\n  return {\n    circulating: (total - treasury).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 2e9; // 2 billion\n  const circulating: number = await axios(\n    \"https://api.coingecko.com/api/v3/coins/world-mobile-token\"\n  ).then((res) => res.data.market_data.circulating_supply);\n  return {\n    circulating: circulating.toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { SupplyFetcher } from \"../types\";\n\nconst fetcher: SupplyFetcher = async () => {\n  const total = 45_000_000_000;\n  return {\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAxiosInstance } from \"../utils\";\n\nconst headers = {\n  \"Accept-Encoding\": \"gzip, deflate, br\",\n};\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const axios = getAxiosInstance(options);\n  const total = 1e8;\n  const circulating = await axios\n    .post(\n      \"https://api.mainnet.wingriders.com/graphql\",\n      {\n        query:\n          \"{wrtDistribution {total {lockedWrt releasedWrt undistributedWrt}}}\",\n      },\n      { headers }\n    )\n    .then((res) => res.data.data.wrtDistribution.total.releasedWrt);\n\n  return {\n    circulating: (circulating / 1e6).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import { defaultFetcherOptions, SupplyFetcher } from \"../types\";\nimport { getAmountInAddresses, getBlockFrostInstance } from \"../utils\";\n\nconst YUMMI =\n  \"078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec92479756d6d69\";\nconst YUMMI_POLICY_ID =\n  \"078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec924\";\nconst STAKING_ADDRESS =\n  \"addr1wydpsqf5zz9ddy76d3f3jrrf6jkpyjr48nx5a706w9y68ucy4wu6s\";\nconst MIN_ADDRESS =\n  \"addr1v88anmxf0wh2uhck5cnltuft8x3k5pclc8e4mpdr8ju23mcjjd05d\";\nconst MIN_MASTERCHEF_ADDRESS =\n  \"addr1qxkmr0m22xeqludcg5rjdmecjxasu9fat0680qehtcsnftaadgykewa9ufvegeuca9yyq03d9v7ea2y2zthgu7hfgjtsddp6gr\";\nconst SUNDAE_ADDRESS =\n  \"addr1vxdsefaj7n3hh6ztnpc4myfvcz7udrfexv5yf9ztkd06kksjv2ht8\";\nconst DRIPDROP_ADDRESS =\n  \"addr1w9zsdakg8mwjeclyzlycn62t4nuvwx6a5ggytcghdn7cvugz5kz5u\";\n\nconst fetcher: SupplyFetcher = async (options = defaultFetcherOptions) => {\n  const blockFrost = getBlockFrostInstance(options);\n  const circulating = Number(\n    await blockFrost\n      .assetsPolicyById(YUMMI_POLICY_ID)\n      .then((resp) => resp[0].quantity)\n  );\n  const total = 1e10;\n  const staking = Number(\n    await getAmountInAddresses(blockFrost, YUMMI, [\n      STAKING_ADDRESS,\n      MIN_ADDRESS,\n      MIN_MASTERCHEF_ADDRESS,\n      SUNDAE_ADDRESS,\n      DRIPDROP_ADDRESS,\n    ])\n  );\n  return {\n    circulating: (circulating - staking).toString(),\n    total: total.toString(),\n  };\n};\n\nexport default fetcher;\n","import aadaFetcher from \"./tokens/aada\";\nimport agcFetcher from \"./tokens/agc\";\nimport agixFetcher from \"./tokens/agix\";\nimport ashibFetcher from \"./tokens/ashib\";\nimport bankFetcher from \"./tokens/bank\";\nimport c3Fetcher from \"./tokens/c3\";\nimport cblpFetcher from \"./tokens/cblp\";\nimport chryFetcher from \"./tokens/chry\";\nimport clapFetcher from \"./tokens/clap\";\nimport clayFetcher from \"./tokens/clay\";\nimport cnetaFetcher from \"./tokens/cneta\";\nimport copiFetcher from \"./tokens/copi\";\nimport danaFetcher from \"./tokens/dana\";\nimport dgafFetcher from \"./tokens/dgaf\";\nimport dingFetcher from \"./tokens/ding\";\nimport discoFetcher from \"./tokens/disco\";\nimport djedFetcher from \"./tokens/djed\";\nimport empFetcher from \"./tokens/emp\";\nimport flacFetcher from \"./tokens/flac\";\nimport gensFetcher from \"./tokens/gens\";\nimport geroFetcher from \"./tokens/gero\";\nimport herbFetcher from \"./tokens/herb\";\nimport hoskyFetcher from \"./tokens/hosky\";\nimport iagFetcher from \"./tokens/iag\";\nimport ibtcFetcher from \"./tokens/ibtc\";\nimport iethFetcher from \"./tokens/ieth\";\nimport indyFetcher from \"./tokens/indy\";\nimport iusdFetcher from \"./tokens/iusd\";\nimport liqwidFetcher from \"./tokens/lq\";\nimport meldFetcher from \"./tokens/meld\";\nimport milkFetcher from \"./tokens/milk\";\nimport minFetcher from \"./tokens/min\";\nimport mintFetcher from \"./tokens/mint\";\nimport moaiFetcher from \"./tokens/moai\";\nimport newmFetcher from \"./tokens/newm\";\nimport ninjazFetcher from \"./tokens/ninjaz\";\nimport nmkrFetcher from \"./tokens/nmkr\";\nimport ntxFetcher from \"./tokens/ntx\";\nimport paviaFetcher from \"./tokens/pavia\";\nimport prsprFetcher from \"./tokens/prspr\";\nimport shenFetcher from \"./tokens/shen\";\nimport snekFetcher from \"./tokens/snek\";\nimport snowFetcher from \"./tokens/snow\";\nimport societyFetcher from \"./tokens/society\";\nimport stableFetcher from \"./tokens/stable\";\nimport sundaeFetcher from \"./tokens/sundae\";\nimport vyfiFetcher from \"./tokens/vyfi\";\nimport wmtFetcher from \"./tokens/wmt\";\nimport wozFetcher from \"./tokens/woz\";\nimport wrtFetcher from \"./tokens/wrt\";\nimport yummiFetcher from \"./tokens/yummi\";\nimport { SupplyFetcher } from \"./types\";\n\nexport * from \"./types\";\n\nexport const supplyFetchers: Record<string, SupplyFetcher> = {\n  \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e\": minFetcher,\n  f43a62fdc3965df486de8a0d32fe800963589c41b38946602a0dc53541474958: agixFetcher,\n  edfd7a1d77bcb8b884c474bdc92a16002d1fb720e454fa6e993444794e5458: ntxFetcher,\n  \"8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b\":\n    milkFetcher,\n  da8c30857834c6ae7203935b89278c532b3995245295456f993e1d244c51: liqwidFetcher,\n  \"6ac8ef33b510ec004fe11585f7c5a9f0c07f0c23428ab4f29c1d7d104d454c44\":\n    meldFetcher,\n  \"9a9693a9a37912a5097918f97918d15240c92ab729a0b7c4aa144d7753554e444145\":\n    sundaeFetcher,\n  \"8fef2d34078659493ce161a6c7fba4b56afefa8535296a5743f6958741414441\":\n    aadaFetcher,\n  \"75fcc276057db5fc48eae0e11453c773c8a54604c3086bf9d95ac1b743485259\":\n    chryFetcher,\n  db30c7905f598ed0154de14f970de0f61f0cb3943ed82c891968480a434c4150: clapFetcher,\n  \"5612bee388219c1b76fd527ed0fa5aa1d28652838bcab4ee4ee63197446973636f696e\":\n    discoFetcher,\n  b34b3ea80060ace9427bda98690a73d33840e27aaa8d6edb7f0c757a634e455441:\n    cnetaFetcher,\n  \"29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e74\":\n    mintFetcher,\n  \"1d7f33bd23d85e1a25d87d86fac4f199c3197a2f7afeb662a0f34e1e776f726c646d6f62696c65746f6b656e\":\n    wmtFetcher,\n  c88bbd1848db5ea665b1fffbefba86e8dcd723b5085348e8a8d2260f44414e41: danaFetcher,\n  \"884892bcdc360bcef87d6b3f806e7f9cd5ac30d999d49970e7a903ae5041564941\":\n    paviaFetcher,\n  b6a7467ea1deb012808ef4e87b5ff371e85f7142d7b356a40d9b42a0436f726e75636f70696173205b76696120436861696e506f72742e696f5d:\n    copiFetcher,\n  \"804f5544c1962a40546827cab750a88404dc7108c0f588b72964754f56594649\":\n    vyfiFetcher,\n  a0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235484f534b59:\n    hoskyFetcher,\n  dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb0014df1047454e53:\n    gensFetcher,\n  \"10a49b996e2402269af553a8a96fb8eb90d79e9eca79e2b4223057b64745524f\":\n    geroFetcher,\n  \"8e51398904a5d3fc129fbf4f1589701de23c7824d5c90fdb9490e15a434841524c4933\":\n    c3Fetcher,\n  \"078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec92479756d6d69\":\n    yummiFetcher,\n  \"482fb00dc32186a4c587dca2df3c7cf2bc455332ab581d51967306e14d4f4149\":\n    moaiFetcher,\n  \"5d16cc1a177b5d9ba9cfa9793b07e60f1fb70fea1f8aef064415d114494147\": iagFetcher,\n  \"533bb94a8850ee3ccbe483106489399112b74c905342cb1792a797a0494e4459\":\n    indyFetcher,\n  \"6c8642400e8437f737eb86df0fc8a8437c760f48592b1ba8f5767e81456d706f7761\":\n    empFetcher,\n  \"5dac8536653edc12f6f5e1045d8164b9f59998d3bdc300fc928434894e4d4b52\":\n    nmkrFetcher,\n  \"52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b95052535052\":\n    prsprFetcher,\n  e5602dec7811774ee560859292c20c3694a19d5daf72ccd94fc1a18d414743: agcFetcher,\n  ce5b9e0f8a88255b65f2e4d065c6e716e9fa9a8a86dfb86423dd1ac044494e47: dingFetcher,\n  \"8f52f6a88acf6127bc4758a16b6047afc4da7887feae121ec217b75a534e4f57\":\n    snowFetcher,\n  \"32bc130691066340caf48ef53d52c684a0e497ffc935d2fd6741efe0574f5a\": wozFetcher,\n  \"25f0fc240e91bd95dcdaebd2ba7713fc5168ac77234a3d79449fc20c534f4349455459\":\n    societyFetcher,\n  df1d850c46d6c9d12cbf6181c35db9225a91b77c8a646b7f636f8ae40014df104e494e4a415a:\n    ninjazFetcher,\n  \"38ad9dc3aec6a2f38e220142b9aa6ade63ebe71f65e7cc2b7d8a8535434c4159\":\n    clayFetcher,\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344\":\n    djedFetcher,\n  \"8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd615368656e4d6963726f555344\":\n    shenFetcher,\n  ee0633e757fdd1423220f43688c74678abde1cead7ce265ba8a24fcd43424c50: cblpFetcher,\n  \"682fe60c9918842b3323c43b5144bc3d52a23bd2fb81345560d73f634e45574d\":\n    newmFetcher,\n  bb4cfbe0f6be60b80f90f815e8353b93431de4df785d75350b9d214a48455242: herbFetcher,\n  \"279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f534e454b\":\n    snekFetcher,\n  \"64c3ebd40ed377989aa3069a2936e07c6ce82df46688c473d921520664676166\":\n    dgafFetcher,\n  afc910d7a306d20c12903979d4935ae4307241d03245743548e767834153484942:\n    ashibFetcher,\n  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069425443: ibtcFetcher,\n  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069455448: iethFetcher,\n  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344: iusdFetcher,\n  \"8daefa391220bd0d8d007f3748d870f7f3c106040314c8515ccc35a5464c4143\":\n    flacFetcher,\n  \"2b28c81dbba6d67e4b5a997c6be1212cba9d60d33f82444ab8b1f21842414e4b\":\n    bankFetcher,\n  \"2adf188218a66847024664f4f63939577627a56c090f679fe366c5ee535441424c45\":\n    stableFetcher,\n  c0ee29a85b13209423b10447d3c2e6a50641a15c57770e27cb9d507357696e67526964657273:\n    wrtFetcher,\n};\n"],"names":["BlockFrostAPI","axios","fetcher","TREASURY_ADDRESSES","DJEDNFT","minFetcher","agixFetcher","ntxFetcher","milkFetcher","liqwidFetcher","meldFetcher","sundaeFetcher","aadaFetcher","chryFetcher","clapFetcher","discoFetcher","cnetaFetcher","mintFetcher","wmtFetcher","danaFetcher","paviaFetcher","copiFetcher","vyfiFetcher","hoskyFetcher","gensFetcher","geroFetcher","c3Fetcher","yummiFetcher","moaiFetcher","iagFetcher","indyFetcher","empFetcher","nmkrFetcher","prsprFetcher","agcFetcher","dingFetcher","snowFetcher","wozFetcher","societyFetcher","ninjazFetcher","clayFetcher","djedFetcher","shenFetcher","cblpFetcher","newmFetcher","herbFetcher","snekFetcher","dgafFetcher","ashibFetcher","ibtcFetcher","iethFetcher","iusdFetcher","flacFetcher","bankFetcher","stableFetcher","wrtFetcher"],"mappings":"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"}