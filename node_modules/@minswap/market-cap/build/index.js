'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var blockfrostJs = require('@blockfrost/blockfrost-js');
var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

const defaultFetcherOptions = {
  timeout: 2e4
};

function getBlockFrostInstance(options) {
  return new blockfrostJs.BlockFrostAPI({
    projectId: process.env["BLOCKFROST_PROJECT_ID"] ?? "",
    requestTimeout: options.timeout
  });
}
function getAxiosInstance(options) {
  return axios__default["default"].create({
    timeout: options.timeout
  });
}
async function getAmountInAddresses(blockFrost, token, addresses) {
  const amounts = await Promise.all(
    addresses.map(async (addr) => {
      const value = addr.startsWith("stake") ? await blockFrost.accountsAddressesAssetsAll(addr) : await blockFrost.addresses(addr).then((resp) => resp.amount);
      const amount = value.filter(({ unit }) => unit === token).reduce((sum, x) => sum + BigInt(x.quantity), 0n);
      return amount;
    })
  );
  return amounts.reduce((sum, x) => sum + x, 0n);
}

const AADA = "8fef2d34078659493ce161a6c7fba4b56afefa8535296a5743f6958741414441";
const fetcher$O = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 295e5;
  const treasuryRaw = await getAmountInAddresses(blockFrost, AADA, [
    "stake1u98ak0va7tgd23rl62tphdare6z602e0vx5m0fw4gdr65kq875eec",
    "stake1uyt8x8wwvn5ze8aw6eqs35w2znyh4xnn9xsu3jxjk503nxcmdkjuz",
    "stake1u9hqmm7neuayxpm9962kk09x27yu5kmcx6h9f98tc4r2mzsyaeh40"
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$N = async () => {
  const total = 3e8;
  return {
    total: total.toString()
  };
};

const fetcher$M = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const circulating = await axios(
    "https://tokensupply.singularitynet.io/tokensupply?tokensymbol=agix&q=circulatingsupply"
  ).then((res) => res.data.toString());
  const total = await axios(
    "https://tokensupply.singularitynet.io/tokensupply?tokensymbol=agix&q=totalsupply"
  ).then((res) => res.data.toString());
  return {
    circulating,
    total
  };
};

const fetcher$L = async () => {
  const total = 109e9;
  return {
    total: total.toString()
  };
};

const BANK = "2b28c81dbba6d67e4b5a997c6be1212cba9d60d33f82444ab8b1f21842414e4b";
const fetcher$K = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 25e11;
  const treasuryRaw = await getAmountInAddresses(blockFrost, BANK, [
    "stake1uxq7mehxxywwzf0cczf7tq4surcphjdd53ngw5ev6qxf7hstnt9qf"
    // $bankercoinada
  ]);
  const treasury = Number(treasuryRaw);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$J = async () => {
  const total = 1e8;
  return {
    total: total.toString()
  };
};

const CBLP = "ee0633e757fdd1423220f43688c74678abde1cead7ce265ba8a24fcd43424c50";
const fetcher$I = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e9;
  const treasuryRaw = await getAmountInAddresses(blockFrost, CBLP, [
    "stake1u80gm88pyu78rr2ee3p7mn482xza6thtnvg3k3c0y43syrsdzm0lw",
    // $yam_treasury
    "stake1uy02585lgl0j9pfzz2jxqmdckar2jqlpwre899j9304l3ysezxnjj",
    // $yam_community
    "stake1uxxghepgwfmtq9spaxf46ucxvns54pyvcqtrpk4888dtqdqhth0sj",
    // $yam_misc
    "stake1u9u5xdu6dxtqkq87rfpls54xp3jw6yqtvaywfzjzyejh65qtjjah2"
    // $yam_team
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const CHRY = "75fcc276057db5fc48eae0e11453c773c8a54604c3086bf9d95ac1b743485259";
const TREASURY_ADDRESSES$4 = [
  "stake1uxluurkaazlqyqfqn22acl6lprea52avn6da0q88yk46zfqrc93qj"
];
const fetcher$H = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 88e6;
  const treasury = Number(
    await getAmountInAddresses(blockFrost, CHRY, TREASURY_ADDRESSES$4)
  );
  return {
    circulating: ((total * 1e6 - treasury) / 1e6).toString(),
    total: total.toString()
  };
};

const CLAP = "db30c7905f598ed0154de14f970de0f61f0cb3943ed82c891968480a434c4150";
const fetcher$G = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e9;
  const treasuryRaw = await getAmountInAddresses(blockFrost, CLAP, [
    "addr1qxkcc74fpfvdenelc7m4zxtezrgvnhmd7z78jlkgr4gy9x9cjxt7rq9rfwqqh3wv24adfv2hex0ttwu3zh7e276xmcesgw34jc"
  ]);
  const treasury = Number(treasuryRaw) / 1e3;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const CLAY = "38ad9dc3aec6a2f38e220142b9aa6ade63ebe71f65e7cc2b7d8a8535434c4159";
const TREASURY_ADDRESSES$3 = [
  "addr1q98wxe2xdwj4agd0cx34pmecfg2s2944mmnyqat2wtf8jxulcgstlsmaaeu0eu40g54rpv3d9n6crxc7vrpjv2f3vfpqrzd0vy",
  //treasury 1
  "addr1qy6rekt5zw7s08q5kvdcw7l8a3npv60sjpk7c2xqjgg23fdsq7gk94dsvmc8razsutevx54rgs3dfza759mmt5m2pppq8wlgdp",
  //treasury 2
  "addr1z8tlml0x8spf2qyzse7qwh0hh4qp50fhx6m2kmr3wsvez340fm4l4jflstl7hz7ucs5793gzr297g67psdx8dssdf68ssh59m2",
  //baking
  "addr1z9uxzlm9zf98kgf27sslzyl2d0j50ssdxlh6du2jt5r7vma0fm4l4jflstl7hz7ucs5793gzr297g67psdx8dssdf68sguhkf9"
  //staking
];
const fetcher$F = async (options = defaultFetcherOptions) => {
  const total = 25e8;
  const blockFrost = getBlockFrostInstance(options);
  const treasury = Number(await getAmountInAddresses(blockFrost, CLAY, TREASURY_ADDRESSES$3)) / 1e4;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const CNETA = "b34b3ea80060ace9427bda98690a73d33840e27aaa8d6edb7f0c757a634e455441";
const fetcher$E = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1000000000n;
  const totalOnCardano = 1000000000n;
  const treasury = await getAmountInAddresses(blockFrost, CNETA, [
    "stake1u8ypd7vtdsst25v65ddqgdgt7w9plww0zyqgktfrr0apscqepfcnm",
    "stake1uxpa2qrzplzsmq5d492xc3ge6g5hfsvymkakznvva5fcznsjy5ed5"
  ]);
  return {
    circulating: (totalOnCardano - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$D = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 384e7;
  const circulating = await axios(
    "https://raw.githubusercontent.com/Cornucopias/circulating-supply/main/cs"
  ).then((res) => res.data.toString());
  return {
    circulating,
    total: total.toString()
  };
};

const fetcher$C = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 125e6;
  const circulating = await axios(
    "https://api.coingecko.com/api/v3/coins/ardana"
  ).then((res) => res.data.market_data.circulating_supply);
  return {
    circulating: circulating.toString(),
    total: total.toString()
  };
};

const DGAF = "64c3ebd40ed377989aa3069a2936e07c6ce82df46688c473d921520664676166";
const fetcher$B = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e11;
  const treasuryRaw = await getAmountInAddresses(blockFrost, DGAF, [
    "stake1u9k7mcf6zvun9wlfrkwsg2w8sy95302gpnj73ly0l6tqhks997y0t"
    // dgaf treasury + vault allocation
  ]);
  const treasury = Number(treasuryRaw);
  const burnedRaw = await getAmountInAddresses(blockFrost, DGAF, [
    "addr1w88w37rdprvqrjn77vuj3mzral6dh6cex0m7smc9p2uqvlct6vp8a"
    // dgaf unredeemable addr
  ]);
  const burned = Number(burnedRaw);
  return {
    circulating: (total - treasury - burned).toString(),
    total: (total - burned).toString()
  };
};

const fetcher$A = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 1e9;
  const circulating = await axios(
    "https://universe.pxlz.org/circulating"
  ).then((res) => res.data);
  return {
    circulating: circulating.toString(),
    total: total.toString()
  };
};

const DISCO = "5612bee388219c1b76fd527ed0fa5aa1d28652838bcab4ee4ee63197446973636f696e";
const fetcher$z = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 5777777777;
  const treasuryRaw = await getAmountInAddresses(blockFrost, DISCO, [
    "addr1xy37w4aqgukmhljn229a4m0ccsk3y49x40tfrnj3u8gw96pruat6q3edh0l9x55tmtkl33pdzf22d27kj889rcwsut5qaa2r64",
    "addr1xywvz3224hc5h5uu8g3x6rk6pjdps6c2acewa735haydqmcuc9z54t03f0fecw3zd58d5ry6rp4s4m3jamarf06g6phsgzp0xt",
    "addr1xxy8exmrl37hk2pyct5mgc45tjh53udzfhqfxavzlc743vug0jdk8lra0v5zfshfk33tgh90frc6ynwqjd6c9l3atzesqljg09",
    "addr1xy306nxnhkseaw4rlgfa55skyd342z4mtq5k2j4jux7k4kfzl4xd80dpn6a287snmffpvgmr259tkkpfv49t9cdadtvssms0kr"
  ]);
  const treasury = Number(treasuryRaw) / 1e8;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const DJED = "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344";
const DJEDNFT$1 = "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a6564537461626c65436f696e4e4654";
const fetcher$y = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e12;
  const addresses = await blockFrost.assetsAddresses(DJEDNFT$1);
  const treasuryRaw = await getAmountInAddresses(blockFrost, DJED, [
    addresses[0]["address"]
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: (total - treasury).toString()
  };
};

const fetcher$x = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 2e8;
  const circulating = await axios.get("https://token.empowa.io/emp/supply").then((res) => res.data.circulating_amount / 1e6);
  return {
    circulating: circulating.toString(),
    total: total.toString()
  };
};

const FLAC = "8daefa391220bd0d8d007f3748d870f7f3c106040314c8515ccc35a5464c4143";
const fetcher$w = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 2e9;
  const treasuryRaw = await getAmountInAddresses(blockFrost, FLAC, [
    "stake1u9ll9vjjqkgyau7nteehe4aufxfx4qq0wr4vzs36gc8vl9sghkjg4",
    // treasury
    "stake1u9sedsmwcmt6za0rhqywryyydl3f7s74ntfk5dhzaev2fkcgp7p36",
    // team
    "stake1uygtdaws5xvjksv8ccqza8sqfv93jdmeuq8jw3xe48l4p8s9r550q",
    // marketing
    "stake1u80f822sv5gag205l0xpl85jl0yqf4255qmpa407mwxrzsgzpavty",
    // parternships
    "stake1uxc5n75f9fr75d734tnj4gayf3pxzwm84w8nauh5tdz9d6c40yuv8"
    // liquidity
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const GENS = "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb0014df1047454e53";
const fetcher$v = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e8;
  const treasuryRaw = await getAmountInAddresses(blockFrost, GENS, [
    "addr1xyjan66zyj6tef93u795axqcqwg353fnx63tzaayursj9ke9m845yf95hjjtreutf6vpsqu3rfznxd4zk9m6fc8pytdsmahfkf",
    "addr1xyr8h2yyn8lgz9epvu8f40e44vtxy7r0nahpj3u75vhe7fqx0w5gfx07sytjzecwn2lnt2ckvfuxl8mwr9reage0nujqyzdx0y",
    "addr1xxwu7tkfvsvmjpecy5s87a9jgpeptrmgq0dkccq4l5zhvm5aeuhvjeqehyrnsffq0a6tysrjzk8ksq7md3sptlg9wehq74j6vl",
    "addr1xx2392yc53nsazxx5z9y40q7gttenemhhgcjaxr5sllugpv4z25f3fr8p6yvdgy2f27puskhn8nh0w3396v8fpllcszs99vzge",
    "addr1xxnv39tyvfvlhl30quelamanyq2exzqwl46y7tr4mzh35j4xez2kgcjel0lz7penlmhmxgq4jvyqalt5fuk8tk90rf9qphswe4",
    "addr1xy9g0r758h52mnnps0eqdrzgy573anh4t0mrmn3w8k95n3g2s78ag00g4h8xrqljq6xysffarm802klk8h8zu0vtf8zsw5shk9",
    "addr1x9wrenxj9acmzfhqns27v7mgdwl2kuull2hdjszyxnr5pwju8nxdytm3kynwp8q4ueaks6a74deel74wm9qygdx8gzaqjap2uz",
    "addr1xysfxc60v6vdwzddeen22ur4u9atdk4k499yfc8e4fsh5u3qjd357e5c6uy6mnnx54c8tct6kmdtd222gns0n2np0feqjzv4eq",
    "addr1xys8w4jtrzqyqhecamqzp9ntlx5ehmt29ehjhf3988nxdweqwatykxyqgp0n3mkqyztxh7dfn0kk5tn09wnz2w0xv6asu4c2g6"
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$u = async () => {
  const total = 5e8;
  return {
    total: total.toString()
  };
};

const HERB = "bb4cfbe0f6be60b80f90f815e8353b93431de4df785d75350b9d214a48455242";
const fetcher$t = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 42e7;
  const treasuryRaw = await getAmountInAddresses(blockFrost, HERB, [
    "stake1uyq4g3vqed986la2h7ywavup76xjr0kpfew30u99quw6w4qjxjucm",
    // rewards
    "stake1uxmx9lcvc7305u8npfcc570s5n9rwleyql37wqa7pr4t8vcwehs7p"
    // treasury
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const HOSKY = "a0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235484f534b59";
const fetcher$s = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e15;
  const treasuryRaw = await getAmountInAddresses(blockFrost, HOSKY, [
    "stake1uyhr6j0v95y3nwemsfyw8l3ant90wruclgwe9ktnm5ptk8qhfnyt6",
    // charles
    "stake1uxgekrcht2nz7eag9kffkh5s2hcpqswaakf9synqdhs82zg6x25pc",
    // tbd
    "stake1u87awjfd5mdufylf0zzeuwz6vpllp0wz0elklphl833mqrchvwzys",
    // rugpool
    "stake1u83p8p9uvdcglucefnxxjc79u54zv3e3qptsx5qjcwxq5rcjzrlwk"
    // meme
  ]);
  const treasury = Number(treasuryRaw);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const IAG = "5d16cc1a177b5d9ba9cfa9793b07e60f1fb70fea1f8aef064415d114494147";
const TREASURY_ADDRESSES$2 = [
  "stake1u9cms5rnmqjed2dxfs9xcq5zupxpcq3l0jq492te2auhppcnlfdsv",
  // Ecosystem Development Fund
  "stake1uyc5ycj8e8fq0ss6fpjv7627tczcwn26w0lrql2gcflqm0q2xd35e",
  // Community Incentives
  "stake1uxc38mnkfvsm0yc2un6g8yp49nshnv2t4rcvqapeahnm87ccz9ns8",
  // Liquidity 1
  "stake1uy8a6tmpcy9mh57m8puka0ra0zq2zt4pjcuphyh770u3spg8cn9zk",
  // Liquidity 2
  "stake1u9gc67yuparwf2qjvvsv5c652yf8zfcn7wwtmruap0fte6qyz6h9g",
  // Development
  "stake1ux0x89ur69hu2gqvsaw8fpt45zj4kt50h8lq4ycd68ycsmc9m4y99",
  // Advisors / Marketing
  "stake1uywysqcqqys7qewrcl0uhda8g25ecr5k2klsr2d45jmdpnsqmc5hh"
  // Team
];
const fetcher$r = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e9;
  const treasury = Number(await getAmountInAddresses(blockFrost, IAG, TREASURY_ADDRESSES$2)) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const iBTC = "f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069425443";
const fetcher$q = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const assetInfo = await blockFrost.assetsById(iBTC);
  const circulating = Number(assetInfo?.quantity) / 1e6;
  return {
    circulating: circulating.toString(),
    total: circulating.toString()
  };
};

const iETH = "f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069455448";
const fetcher$p = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const assetInfo = await blockFrost.assetsById(iETH);
  const circulating = Number(assetInfo?.quantity) / 1e6;
  return {
    circulating: circulating.toString(),
    total: circulating.toString()
  };
};

const fetcher$o = async (options = defaultFetcherOptions) => {
  const total = 35e6;
  const axios = getAxiosInstance(options);
  const response = await axios.get(
    "https://analytics.indigoprotocol.io/api/stats/indy-circulating-supply"
  );
  const treasury = Number(response.data.circulatingSupply) / 1e6;
  return {
    circulating: treasury.toString(),
    total: total.toString()
  };
};

const iUSD = "f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344";
const fetcher$n = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const assetInfo = await blockFrost.assetsById(iUSD);
  const circulating = Number(assetInfo?.quantity) / 1e6;
  return {
    circulating: circulating.toString(),
    total: circulating.toString()
  };
};

const LQ = "da8c30857834c6ae7203935b89278c532b3995245295456f993e1d244c51";
const fetcher$m = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 21e6;
  const treasuryRaw = await getAmountInAddresses(blockFrost, LQ, [
    "stake17xuctqah3vtn232230mgnh8j0g0c9xe9j59a5jv54v2m6lghq7wjg",
    // user dist
    "stake17y92lfz032ahf6xly5fp3l8k28xzpzullx46ffg8vmt7xpquzjyrp",
    // team
    "stake179h0rfqsl5qhl7mh9wrazeel0wkzxck8zaq6et4k3jtz96c374qun",
    // treasury
    "stake1782eemwxrrfmzga0yq5eewhu5cqe6p0n0wa8xwzhwkwhl4q327q0r"
    // staking
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$l = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const circulating = await axios(
    "https://app-backend.meld.com/api/market/meld/supply"
  ).then((res) => res.data.toString());
  const total = 4e9;
  return {
    circulating,
    total: total.toString()
  };
};

const MILK = "8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b";
const fetcher$k = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 10000000n;
  const treasury = await getAmountInAddresses(blockFrost, MILK, [
    "addr1v8c3mztrzpjqxzrcl8rvxln8xyvanz6pufuaju7rwkglnychv3cg3"
  ]);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const MIN = "29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e";
const TREASURY_ADDRESSES$1 = [
  "addr1qxkmr0m22xeqludcg5rjdmecjxasu9fat0680qehtcsnftaadgykewa9ufvegeuca9yyq03d9v7ea2y2zthgu7hfgjtsddp6gr",
  // yield farming bot
  "addr1vx00uxlpkzgkrga47zdypj40a3yjs0u3wad88kdy9l3rekcrmyz69",
  // vesting bot for MINt conversion
  "addr1wx5p836jswavyfd3nuwscz53fkyu43kmn2wwje73qhf48mqw02kqx",
  // vesting contract
  // TREASURY
  "addr1vy5nz5a8lvrd294n4cachm7qmv5jsjal9etkpwyjvqhsunq70e3fe",
  // old treasury
  "addr1zymeshes0pxnr2s4v95a4wchxs74l0lqt5n3f6rxynnepgjj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq64anuz",
  // team
  "addr1z87vw6ts32hywu4j4kyk9qfgd36zhzx3y7fc786vgzlc57zj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq9rwl7c",
  // dev fund
  "addr1z9wdv59sq7zzy2l6gchq3247lz7ssfsxs45nj4njhwsp5uzj2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pqzygnta",
  // DAO
  "addr1z9mjhq5c4s0smv2c92g9yvecpju3p8cfaneu8jzwq97ry62j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pqw9pw55",
  // incentives & partnerships
  "addr1zx0wxal6dz7rjzxk2mwfvj9564rp9uajqrscftx44tp6ha6j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq83j9cv"
  // yield farming treasury
];
const fetcher$j = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 5e9;
  const treasury = Number(await getAmountInAddresses(blockFrost, MIN, TREASURY_ADDRESSES$1)) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const MINT = "29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e74";
const TREASURY_ADDRESSES = [
  "addr1v9urht2tqg7ncs7r545qdj2wn5tpam5l04t7eyermpmyvmg5xf2mt",
  // FISO
  "addr1w9p9akyhpqsy0xq79g8hspy90xl9htxfrd3mama6py42jjgtvfgn8"
  // DripDropz
];
const fetcher$i = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e8;
  const treasury = Number(await getAmountInAddresses(blockFrost, MINT, TREASURY_ADDRESSES)) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const MOAI = "482fb00dc32186a4c587dca2df3c7cf2bc455332ab581d51967306e14d4f4149";
const fetcher$h = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = Number(6e7);
  const treasuryRaw = await getAmountInAddresses(blockFrost, MOAI, [
    "stake1uyszp885h7z8fry5thjdcj5msk59ajsannca7x3g3d2ycvgqfq6t9",
    // Treasury
    "stake1u9afgy0npvt9sal5vzlm5t6n5uyvch8t9mmznhtkn9wjacgfdtldf",
    // Mutant Stake Rewards Distribution
    "stake1ux07wmwzwv06kl02ct3m4lly569lsvjvp6za9756r8hdsmslyw5mv"
    // burn wallet
  ]);
  const treasury = Number(treasuryRaw);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const NEWM = "682fe60c9918842b3323c43b5144bc3d52a23bd2fb81345560d73f634e45574d";
const fetcher$g = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 9735033900;
  const treasuryRaw = await getAmountInAddresses(blockFrost, NEWM, [
    "stake1u8kt3m25a5nycushdc7rl7jm8wmll23nadxc8rpzwx7vq8s3j8jf8",
    // NEWM foundation
    "stake1ux0vqjvjccqvk8a43jwa5nd2aqzt4ekdjarvnqmt9629pzcty2qcs",
    // BeatHaven
    "stake1u8n0tlf4f2kktz7k3kr0g7sdn98stmsmm42kw7xcue2smycv766hh",
    // NEWM LLC
    "addr1wxkajet4zhhuylr6475ykqerll0gl8x8v8kgmnrpxt2vrwq2eh67y"
    // ISPO (via DropDropz)
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const NINJAZ = "df1d850c46d6c9d12cbf6181c35db9225a91b77c8a646b7f636f8ae40014df104e494e4a415a";
const fetcher$f = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 5e9;
  const treasury = await getAmountInAddresses(blockFrost, NINJAZ, [
    "addr1x83nemulpeta9sdvmys3stka3qr3vdgt2cea9nd7k43pknwyzjxyjwc0htews4pm02nnyaa0sep8lmc9lsz8e4dfleeqe4r25a",
    "addr1x8cesdmszn65gp0wulhle6fvtkgcumu7kuyjwgd3unvcm5hljfu8vk7x6lh6vd8wjf2wymdq339fq8h85ujgky928jxs0g2eq4",
    "addr1x8qxwpaamqac5pjvrqsesm6s0kgvh4fjg2gxqgfgm3z0482690h9e0eu6px7y70f4en0mlveshvzwuvmxjpl8v7knklqtz5eda",
    "addr1x8xscqxca9szg7xgsuh2cfjwunjutqevawx6sdp0qxvk8upfaw2m3ygzjvu6639tghza86gr99f85lk2874r9yn8ukwsguhnuw",
    "addr1xx86d7hxnyhnu4sq3kwq2w67w54e6t3wpd8vm3wcdy6n02kr7ayf3pjwwpyrntnaexdxzemq3k7adaq5m4cxcph06pksh32ndx",
    "addr1xxnnkkfc4uwwut0nc9nqd4sw955ehsv46gahq5vue8dljsll5f6g7hyfa82fc9uq202unkykmzzd3ymx7rc54sjrywaqhj2a24",
    "addr1xxs8mllzludfkmfaunx2g38xr8grzxuruul46z2h0t7n62x2rj8vv8evw74rudkjjw6ufm5sy39cvwawcvuw2scfyqmqsu0wgd",
    "addr1qx2waaxg7hgt79a70892qegnerdqhxy45uyn698wncegwryh0ze5nrhs9ajhgnzd6eum9zuhu5e7g533cacmndqgu20shextxn"
  ]);
  return {
    circulating: (total - Number(treasury) / 1e6).toString(),
    total: total.toString()
  };
};

const fetcher$e = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 1e10;
  const circulating = await axios(
    "https://api.coingecko.com/api/v3/coins/nft-maker"
  ).then((res) => res.data.market_data.circulating_supply);
  return {
    circulating: circulating.toString(),
    total: total.toString()
  };
};

const fetcher$d = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const circulating = await axios(
    "https://tokensupply.singularitynet.io/tokensupply?tokensymbol=ntx&q=circulatingsupply"
  ).then((res) => res.data.toString());
  const total = await axios(
    "https://tokensupply.singularitynet.io/tokensupply?tokensymbol=ntx&q=totalsupply"
  ).then((res) => res.data.toString());
  return {
    circulating,
    total
  };
};

const PAVIA = "884892bcdc360bcef87d6b3f806e7f9cd5ac30d999d49970e7a903ae5041564941";
const fetcher$c = async (options = defaultFetcherOptions) => {
  const total = 2e9;
  const blockFrost = getBlockFrostInstance(options);
  const treasury = await getAmountInAddresses(blockFrost, PAVIA, [
    "addr1qx49wuqaa0j83z4y04nyltpcmf602f0afn5s84l7a9wnjryg090a5a6en7e483rh98d67efcenetg9xpr6fvv2llmhts837axc"
  ]);
  return {
    circulating: (total - Number(treasury)).toString(),
    total: total.toString()
  };
};

const PRSPR = "52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b95052535052";
const PRSPR_POLICY_ID = "52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b9";
const TREASURY = "addr1wydpsqf5zz9ddy76d3f3jrrf6jkpyjr48nx5a706w9y68ucy4wu6s";
const fetcher$b = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const circulating = Number(
    await blockFrost.assetsPolicyById(PRSPR_POLICY_ID).then((resp) => resp[0].quantity)
  );
  const total = 375e6;
  const treasury = Number(
    await getAmountInAddresses(blockFrost, PRSPR, [TREASURY])
  );
  return {
    circulating: (circulating - treasury).toString(),
    total: total.toString()
  };
};

const SHEN = "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd615368656e4d6963726f555344";
const DJEDNFT = "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a6564537461626c65436f696e4e4654";
const fetcher$a = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1e12;
  const addresses = await blockFrost.assetsAddresses(DJEDNFT);
  const treasuryRaw = await getAmountInAddresses(blockFrost, SHEN, [
    addresses[0]["address"]
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: (total - treasury).toString()
  };
};

const SNEK = "279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f534e454b";
const fetcher$9 = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 7671588e4;
  const treasuryRaw = await getAmountInAddresses(blockFrost, SNEK, [
    "stake1u8zjwv6a8ztrl9xkcc90utn32y4jsrxep90z2967c5aqv6cxchhhv",
    // $snekcoinada
    "stake1u8ncs7903m7pxzfyrzxagzx0aey4aus2533eeqlnevw0h4qs2f82r"
    // $snekcoinvault
  ]);
  const burnRaw = await getAmountInAddresses(blockFrost, SNEK, [
    "addr1w8qmxkacjdffxah0l3qg8hq2pmvs58q8lcy42zy9kda2ylc6dy5r4"
    //$burnsnek
  ]);
  const treasury = Number(treasuryRaw);
  const burn = Number(burnRaw);
  return {
    circulating: (total - treasury - burn).toString(),
    total: (total - burn).toString()
  };
};

const SNOW = "8f52f6a88acf6127bc4758a16b6047afc4da7887feae121ec217b75a534e4f57";
const fetcher$8 = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 1000000n;
  const treasury = await getAmountInAddresses(blockFrost, SNOW, [
    "addr1q8jvdvjewjvmtkl4juup0wekz75520l5d4ltap48gwhqkfq0m4qjp5thfp4zf2s0z586f9aq54ct3e8r9gzw0edulveq3vn8tu",
    // SNOW treasury
    "addr1vxfa8dwzflct4re7qn2ls7t46w6rc479rafnwzqx4z2asuq6cg00t"
    // MuesliSwap Staking Rewards distribution
  ]);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$7 = async (options = defaultFetcherOptions) => {
  const total = 7e8;
  const projector_rewards = 56e6;
  const axios = getAxiosInstance(options);
  const info = await axios("https://city.theapesociety.io/api/getsocietyinfo");
  const emissions = info.data.emissions;
  const burned = info.data.burned / 1e6;
  return {
    circulating: (total - burned - emissions - projector_rewards).toString(),
    total: (total - burned).toString()
  };
};

const STABLE = "2adf188218a66847024664f4f63939577627a56c090f679fe366c5ee535441424c45";
const fetcher$6 = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 206420691337n;
  const treasury = await getAmountInAddresses(blockFrost, STABLE, [
    "stake1uyjlfag0xqnmyk6tfa5a0weanrl4yzxxf0kjhk4k0e2s4ygczhp79",
    // $stablepayments
    "stake1uxufvv9llknwmracxxsnxqe8dnc5ut0z2jgparqz5rh9y5cda5g3k",
    // $stablelistings
    "stake1uyuxkjldqjztcfuj8h288rc9ryfxzek7375vwplhzrns7zqwy9emg",
    // $stablerewards
    "stake1uyc3xeye50t8d9vhm7jt5jn83ddfdtwr0s64v0qhy7q2jfcqejl53",
    // $stablemarketing
    "stake1uxjmh6ngs3xsk3d9lxqnne6yqm2822e23hpv0j6q3uruxzc865t3j"
    // $stableutility
  ]);
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const SUNDAE = "9a9693a9a37912a5097918f97918d15240c92ab729a0b7c4aa144d7753554e444145";
const fetcher$5 = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 2e9;
  const treasuryRaw = await getAmountInAddresses(blockFrost, SUNDAE, [
    "addr1w9pgj46r4wh80ujlrdf5h6sxuuvfac2wurfnsn4xgqw584sfa966l",
    "addr1w9742z4fewans7ry6cjp95pc4ecv7y54cx298lp5qfw7s9gv8ukrj"
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const VYFI = "804f5544c1962a40546827cab750a88404dc7108c0f588b72964754f56594649";
const fetcher$4 = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const total = 45e7;
  const treasuryRaw = await getAmountInAddresses(blockFrost, VYFI, [
    "addr1qx6jq2ns6g9t4y8zyf2ahmhjzw8k6h3a7fy5tkqwgnwgh09z80nptm8at52jqjauttsswp6d7h9rq807z80mqhge5aqqctjalg"
  ]);
  const treasury = Number(treasuryRaw) / 1e6;
  return {
    circulating: (total - treasury).toString(),
    total: total.toString()
  };
};

const fetcher$3 = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 2e9;
  const circulating = await axios(
    "https://api.coingecko.com/api/v3/coins/world-mobile-token"
  ).then((res) => res.data.market_data.circulating_supply);
  return {
    circulating: circulating.toString(),
    total: total.toString()
  };
};

const fetcher$2 = async () => {
  const total = 45e9;
  return {
    total: total.toString()
  };
};

const headers = {
  "Accept-Encoding": "gzip, deflate, br"
};
const fetcher$1 = async (options = defaultFetcherOptions) => {
  const axios = getAxiosInstance(options);
  const total = 1e8;
  const circulating = await axios.post(
    "https://api.mainnet.wingriders.com/graphql",
    {
      query: "{wrtDistribution {total {lockedWrt releasedWrt undistributedWrt}}}"
    },
    { headers }
  ).then((res) => res.data.data.wrtDistribution.total.releasedWrt);
  return {
    circulating: (circulating / 1e6).toString(),
    total: total.toString()
  };
};

const YUMMI = "078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec92479756d6d69";
const YUMMI_POLICY_ID = "078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec924";
const STAKING_ADDRESS = "addr1wydpsqf5zz9ddy76d3f3jrrf6jkpyjr48nx5a706w9y68ucy4wu6s";
const MIN_ADDRESS = "addr1v88anmxf0wh2uhck5cnltuft8x3k5pclc8e4mpdr8ju23mcjjd05d";
const MIN_MASTERCHEF_ADDRESS = "addr1qxkmr0m22xeqludcg5rjdmecjxasu9fat0680qehtcsnftaadgykewa9ufvegeuca9yyq03d9v7ea2y2zthgu7hfgjtsddp6gr";
const SUNDAE_ADDRESS = "addr1vxdsefaj7n3hh6ztnpc4myfvcz7udrfexv5yf9ztkd06kksjv2ht8";
const DRIPDROP_ADDRESS = "addr1w9zsdakg8mwjeclyzlycn62t4nuvwx6a5ggytcghdn7cvugz5kz5u";
const fetcher = async (options = defaultFetcherOptions) => {
  const blockFrost = getBlockFrostInstance(options);
  const circulating = Number(
    await blockFrost.assetsPolicyById(YUMMI_POLICY_ID).then((resp) => resp[0].quantity)
  );
  const total = 1e10;
  const staking = Number(
    await getAmountInAddresses(blockFrost, YUMMI, [
      STAKING_ADDRESS,
      MIN_ADDRESS,
      MIN_MASTERCHEF_ADDRESS,
      SUNDAE_ADDRESS,
      DRIPDROP_ADDRESS
    ])
  );
  return {
    circulating: (circulating - staking).toString(),
    total: total.toString()
  };
};

const supplyFetchers = {
  "29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e": fetcher$j,
  f43a62fdc3965df486de8a0d32fe800963589c41b38946602a0dc53541474958: fetcher$M,
  edfd7a1d77bcb8b884c474bdc92a16002d1fb720e454fa6e993444794e5458: fetcher$d,
  "8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b": fetcher$k,
  da8c30857834c6ae7203935b89278c532b3995245295456f993e1d244c51: fetcher$m,
  "6ac8ef33b510ec004fe11585f7c5a9f0c07f0c23428ab4f29c1d7d104d454c44": fetcher$l,
  "9a9693a9a37912a5097918f97918d15240c92ab729a0b7c4aa144d7753554e444145": fetcher$5,
  "8fef2d34078659493ce161a6c7fba4b56afefa8535296a5743f6958741414441": fetcher$O,
  "75fcc276057db5fc48eae0e11453c773c8a54604c3086bf9d95ac1b743485259": fetcher$H,
  db30c7905f598ed0154de14f970de0f61f0cb3943ed82c891968480a434c4150: fetcher$G,
  "5612bee388219c1b76fd527ed0fa5aa1d28652838bcab4ee4ee63197446973636f696e": fetcher$z,
  b34b3ea80060ace9427bda98690a73d33840e27aaa8d6edb7f0c757a634e455441: fetcher$E,
  "29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c64d494e74": fetcher$i,
  "1d7f33bd23d85e1a25d87d86fac4f199c3197a2f7afeb662a0f34e1e776f726c646d6f62696c65746f6b656e": fetcher$3,
  c88bbd1848db5ea665b1fffbefba86e8dcd723b5085348e8a8d2260f44414e41: fetcher$C,
  "884892bcdc360bcef87d6b3f806e7f9cd5ac30d999d49970e7a903ae5041564941": fetcher$c,
  b6a7467ea1deb012808ef4e87b5ff371e85f7142d7b356a40d9b42a0436f726e75636f70696173205b76696120436861696e506f72742e696f5d: fetcher$D,
  "804f5544c1962a40546827cab750a88404dc7108c0f588b72964754f56594649": fetcher$4,
  a0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235484f534b59: fetcher$s,
  dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb0014df1047454e53: fetcher$v,
  "10a49b996e2402269af553a8a96fb8eb90d79e9eca79e2b4223057b64745524f": fetcher$u,
  "8e51398904a5d3fc129fbf4f1589701de23c7824d5c90fdb9490e15a434841524c4933": fetcher$J,
  "078eafce5cd7edafdf63900edef2c1ea759e77f30ca81d6bbdeec92479756d6d69": fetcher,
  "482fb00dc32186a4c587dca2df3c7cf2bc455332ab581d51967306e14d4f4149": fetcher$h,
  "5d16cc1a177b5d9ba9cfa9793b07e60f1fb70fea1f8aef064415d114494147": fetcher$r,
  "533bb94a8850ee3ccbe483106489399112b74c905342cb1792a797a0494e4459": fetcher$o,
  "6c8642400e8437f737eb86df0fc8a8437c760f48592b1ba8f5767e81456d706f7761": fetcher$x,
  "5dac8536653edc12f6f5e1045d8164b9f59998d3bdc300fc928434894e4d4b52": fetcher$e,
  "52489ea87bbceaf6375cc22f74c19382a3d5da3f8b9b15d2537044b95052535052": fetcher$b,
  e5602dec7811774ee560859292c20c3694a19d5daf72ccd94fc1a18d414743: fetcher$N,
  ce5b9e0f8a88255b65f2e4d065c6e716e9fa9a8a86dfb86423dd1ac044494e47: fetcher$A,
  "8f52f6a88acf6127bc4758a16b6047afc4da7887feae121ec217b75a534e4f57": fetcher$8,
  "32bc130691066340caf48ef53d52c684a0e497ffc935d2fd6741efe0574f5a": fetcher$2,
  "25f0fc240e91bd95dcdaebd2ba7713fc5168ac77234a3d79449fc20c534f4349455459": fetcher$7,
  df1d850c46d6c9d12cbf6181c35db9225a91b77c8a646b7f636f8ae40014df104e494e4a415a: fetcher$f,
  "38ad9dc3aec6a2f38e220142b9aa6ade63ebe71f65e7cc2b7d8a8535434c4159": fetcher$F,
  "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd61446a65644d6963726f555344": fetcher$y,
  "8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd615368656e4d6963726f555344": fetcher$a,
  ee0633e757fdd1423220f43688c74678abde1cead7ce265ba8a24fcd43424c50: fetcher$I,
  "682fe60c9918842b3323c43b5144bc3d52a23bd2fb81345560d73f634e45574d": fetcher$g,
  bb4cfbe0f6be60b80f90f815e8353b93431de4df785d75350b9d214a48455242: fetcher$t,
  "279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3f534e454b": fetcher$9,
  "64c3ebd40ed377989aa3069a2936e07c6ce82df46688c473d921520664676166": fetcher$B,
  afc910d7a306d20c12903979d4935ae4307241d03245743548e767834153484942: fetcher$L,
  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069425443: fetcher$q,
  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069455448: fetcher$p,
  f66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b6988069555344: fetcher$n,
  "8daefa391220bd0d8d007f3748d870f7f3c106040314c8515ccc35a5464c4143": fetcher$w,
  "2b28c81dbba6d67e4b5a997c6be1212cba9d60d33f82444ab8b1f21842414e4b": fetcher$K,
  "2adf188218a66847024664f4f63939577627a56c090f679fe366c5ee535441424c45": fetcher$6,
  c0ee29a85b13209423b10447d3c2e6a50641a15c57770e27cb9d507357696e67526964657273: fetcher$1
};

exports.defaultFetcherOptions = defaultFetcherOptions;
exports.supplyFetchers = supplyFetchers;
//# sourceMappingURL=index.js.map
